[env]
ARCH = "default"
GEN = "neverland"
BIN = "kernel.elf"
BOARD = "default"
CORE = "1"
DISK = "disk.img"
DISK_UEFI = "disk-uefi.img"
DISK_SIZE = "256M"
MEMORY = "1G"
MODE = "debug"

[tasks.make-disk-uefi]
script = '''
if [ $ARCH = "x86_64-unknown-none" ]; then
    cd loader
    cargo build
    cd ..
    if [ ! -f "$DISK_UEFI" ]; then
        qemu-img create -f raw "$DISK_UEFI" $DISK_SIZE
        mkfs.fat -n 'DISK' -F 32 "$DISK_UEFI"
    fi
    if [ "$(uname)" == "Darwin" ]; then
        hdiutil attach -mountpoint mnt $DISK_UEFI
    else if [ "$(uname)" == "Linux" ]; then
        mount -o loop $DISK_UEFI mnt
    fi
    fi
    mkdir -p ./mnt/EFI/BOOT
    cp ./loader/target/x86_64-unknown-uefi/debug/loader.efi ./mnt/EFI/BOOT/BOOTX64.EFI
    cp $BIN ./mnt/$BIN
    if [ "$(uname)" == "Darwin" ]; then
        hdiutil detach mnt
    else if [ "$(uname)" == "Linux" ]; then
        umount mnt && rm -rf mnt
    fi
    fi
fi
'''

[tasks.make-disk]
script = '''
if [ ! -f "$DISK" ]; then
    qemu-img create -f raw "$DISK" $DISK_SIZE
    mkfs.fat -n 'DISK' -F 32 "$DISK"
fi
'''

[tasks.build]
script = '''
if [ $ARCH = "default" ]; then
    if [ $MODE = "release" ]; then
        cargo build --release
    else
        cargo build
    fi
else
    if [ $MODE = "release" ]; then
        cargo build --target $ARCH --release
    else
        cargo build --target $ARCH
    fi
fi

cp ./target/$ARCH/$MODE/$GEN $BIN
'''
[tasks.build-riscv64-dev]
env = {ARCH = "riscv64gc-unknown-none-elf", MODE = "debug"}
run_task = "build"

[tasks.build-riscv64]
env = {ARCH = "riscv64gc-unknown-none-elf", MODE = "release"}
run_task = "build"

[tasks.build-aarch64-dev]
env = {ARCH = "aarch64-unknown-none-softfloat", MODE = "debug"}
run_task = "build"

[tasks.build-aarch64]
env = {ARCH = "aarch64-unknown-none-softfloat", MODE = "release"}
run_task = "build"

[tasks.build-x86_64-dev]
env = {ARCH = "x86_64-unknown-none", MODE = "debug"}
run_task = "build"

[tasks.build-x86_64]
env = {ARCH = "x86_64-unknown-none", MODE = "release"}
run_task = "build"

[tasks.run-riscv64-dev]
dependencies = ["build-riscv64-dev", "make-disk"]
script = '''
qemu-system-riscv64 -s -machine virt -bios none -m $MEMORY -smp $CORE -serial stdio -kernel $BIN \
    -drive file=$DISK,if=none,format=raw,id=x0 \
    -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
'''

[tasks.run-riscv64]
dependencies = ["build-riscv64", "make-disk"]
script = '''
qemu-system-riscv64 -machine virt -bios none -m $MEMORY -smp $CORE -serial stdio -kernel $BIN \
    -drive file=$DISK,if=none,format=raw,id=x0 \
    -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
'''

[tasks.run-aarch64-dev]
dependencies = ["build-aarch64-dev", "make-disk"]
script = '''
qemu-system-aarch64 -s -machine raspi3b -m $MEMORY -serial null -serial stdio -kernel $BIN \
    -drive file=$DISK,if=sd,format=raw
'''

[tasks.run-aarch64]
dependencies = ["build-aarch64", "make-disk"]
script = '''
qemu-system-aarch64 -machine raspi3b -m $MEMORY -serial null -serial stdio -kernel $BIN \
    -drive file=$DISK,if=sd,format=raw
'''

[tasks.run-x86_64-dev]
dependencies = ["build-x86_64-dev", "make-disk-uefi"]
script = '''
qemu-system-x86_64 \
    -m $MEMORY \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_VARS.fd \
    -drive format=raw,media=disk,index=0,file=$DISK_UEFI
'''

[tasks.run-x86_64]
dependencies = ["build-x86_64", "make-disk-uefi"]
script = '''
qemu-system-x86_64 \
    -m $MEMORY \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_VARS.fd \
    -drive format=raw,media=disk,index=0,file=$DISK_UEFI
'''

[tasks.debug-riscv64-dev]
dependencies = ["build-riscv64-dev", "make-disk"]
script = '''
qemu-system-riscv64 -s -S -machine virt -bios none -m $MEMORY -smp $CORE -serial stdio -kernel $BIN \
    -drive file=$DISK,if=none,format=raw,id=x0 \
    -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
'''

[tasks.debug-riscv64]
dependencies = ["build-riscv64", "make-disk"]
script = '''
qemu-system-riscv64 -s -S -machine virt -bios none -m $MEMORY -smp $CORE -serial stdio -kernel $BIN \
    -drive file=$DISK,if=none,format=raw,id=x0 \
    -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
'''

[tasks.debug-aarch64-dev]
dependencies = ["build-aarch64-dev", "make-disk"]
script = '''
qemu-system-aarch64 -s -S -machine raspi3b -m $MEMORY -serial null -serial stdio -kernel $BIN \
    -drive file=$DISK,if=sd,format=raw
'''

[tasks.debug-aarch64]
dependencies = ["build-aarch64", "make-disk"]
script = '''
qemu-system-aarch64 -s -S -machine raspi3b -m $MEMORY -serial null -serial stdio -kernel $BIN \
    -drive file=$DISK,if=sd,format=raw
'''

[tasks.debug-x86_64-dev]
dependencies = ["build-x86_64-dev", "make-disk-uefi"]
script = '''
qemu-system-x86_64 \
    -s -S \
    -m $MEMORY \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_VARS.fd \
    -drive format=raw,media=disk,index=0,file=$DISK_UEFI
'''

[tasks.debug-x86_64]
dependencies = ["build-x86_64", "make-disk-uefi"]
script = '''
qemu-system-x86_64 \
    -s -S \
    -m $MEMORY \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=./tools/ovmf/OVMF_VARS.fd \
    -drive format=raw,media=disk,index=0,file=$DISK_UEFI
'''

[tasks.clean]
script = '''
rm -rf $BIN $DISK $DISK_UEFI
cargo clean
cd loader
cargo clean
cd ..
'''

[config]
skip_core_tasks = true
